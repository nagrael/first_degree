// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `lab.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package lab;

/**
 * Provides type-specific helper functions.
 **/
public final class EquipmentPrxHelper extends Ice.ObjectPrxHelperBase implements EquipmentPrx
{
    private static final String __addClient_name = "addClient";

    public void addClient(Ice.Identity ident)
    {
        addClient(ident, null, false);
    }

    public void addClient(Ice.Identity ident, java.util.Map<String, String> __ctx)
    {
        addClient(ident, __ctx, true);
    }

    private void addClient(Ice.Identity ident, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_addClient(begin_addClient(ident, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident)
    {
        return begin_addClient(ident, null, false, false, null);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, java.util.Map<String, String> __ctx)
    {
        return begin_addClient(ident, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, Ice.Callback __cb)
    {
        return begin_addClient(ident, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addClient(ident, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, Callback_Equipment_addClient __cb)
    {
        return begin_addClient(ident, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, java.util.Map<String, String> __ctx, Callback_Equipment_addClient __cb)
    {
        return begin_addClient(ident, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addClient(ident, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addClient(ident, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addClient(ident, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addClient(Ice.Identity ident, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addClient(ident, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_addClient(Ice.Identity ident, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addClient(ident, 
                               __ctx, 
                               __explicitCtx, 
                               __synchronous, 
                               new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_addClient(Ice.Identity ident, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__addClient_name, __cb);
        try
        {
            __result.prepare(__addClient_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Ice.Identity.__write(__os, ident);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_addClient(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __addClient_name);
    }

    private static final String __removeClient_name = "removeClient";

    public void removeClient(Ice.Identity ident)
    {
        removeClient(ident, null, false);
    }

    public void removeClient(Ice.Identity ident, java.util.Map<String, String> __ctx)
    {
        removeClient(ident, __ctx, true);
    }

    private void removeClient(Ice.Identity ident, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_removeClient(begin_removeClient(ident, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_removeClient(Ice.Identity ident)
    {
        return begin_removeClient(ident, null, false, false, null);
    }

    public Ice.AsyncResult begin_removeClient(Ice.Identity ident, java.util.Map<String, String> __ctx)
    {
        return begin_removeClient(ident, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_removeClient(Ice.Identity ident, Ice.Callback __cb)
    {
        return begin_removeClient(ident, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_removeClient(Ice.Identity ident, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeClient(ident, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_removeClient(Ice.Identity ident, Callback_Equipment_removeClient __cb)
    {
        return begin_removeClient(ident, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_removeClient(Ice.Identity ident, java.util.Map<String, String> __ctx, Callback_Equipment_removeClient __cb)
    {
        return begin_removeClient(ident, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_removeClient(Ice.Identity ident, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_removeClient(ident, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_removeClient(Ice.Identity ident, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeClient(ident, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_removeClient(Ice.Identity ident, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_removeClient(ident, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_removeClient(Ice.Identity ident, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeClient(ident, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_removeClient(Ice.Identity ident, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeClient(ident, 
                                  __ctx, 
                                  __explicitCtx, 
                                  __synchronous, 
                                  new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_removeClient(Ice.Identity ident, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__removeClient_name, __cb);
        try
        {
            __result.prepare(__removeClient_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Ice.Identity.__write(__os, ident);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_removeClient(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __removeClient_name);
    }

    private static final String __stopuse_name = "stopuse";

    public int stopuse()
    {
        return stopuse(null, false);
    }

    public int stopuse(java.util.Map<String, String> __ctx)
    {
        return stopuse(__ctx, true);
    }

    private int stopuse(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__stopuse_name);
        return end_stopuse(begin_stopuse(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_stopuse()
    {
        return begin_stopuse(null, false, false, null);
    }

    public Ice.AsyncResult begin_stopuse(java.util.Map<String, String> __ctx)
    {
        return begin_stopuse(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_stopuse(Ice.Callback __cb)
    {
        return begin_stopuse(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_stopuse(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopuse(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_stopuse(Callback_Equipment_stopuse __cb)
    {
        return begin_stopuse(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_stopuse(java.util.Map<String, String> __ctx, Callback_Equipment_stopuse __cb)
    {
        return begin_stopuse(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_stopuse(IceInternal.Functional_IntCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_stopuse(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_stopuse(IceInternal.Functional_IntCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopuse(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_stopuse(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_IntCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_stopuse(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_stopuse(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_IntCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopuse(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_stopuse(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_IntCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopuse(__ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         EquipmentPrxHelper.__stopuse_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_stopuse(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopuse_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__stopuse_name, __cb);
        try
        {
            __result.prepare(__stopuse_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_stopuse(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __stopuse_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __stopuse_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        lab.EquipmentPrx __proxy = (lab.EquipmentPrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_stopuse(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __use_name = "use";

    public int use()
    {
        return use(null, false);
    }

    public int use(java.util.Map<String, String> __ctx)
    {
        return use(__ctx, true);
    }

    private int use(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__use_name);
        return end_use(begin_use(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_use()
    {
        return begin_use(null, false, false, null);
    }

    public Ice.AsyncResult begin_use(java.util.Map<String, String> __ctx)
    {
        return begin_use(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_use(Ice.Callback __cb)
    {
        return begin_use(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_use(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_use(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_use(Callback_Equipment_use __cb)
    {
        return begin_use(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_use(java.util.Map<String, String> __ctx, Callback_Equipment_use __cb)
    {
        return begin_use(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_use(IceInternal.Functional_IntCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_use(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_use(IceInternal.Functional_IntCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_use(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_use(java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_IntCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_use(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_use(java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_IntCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_use(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_use(java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.Functional_IntCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_use(__ctx, __explicitCtx, __synchronous, 
                         new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                             {
                                 public final void __completed(Ice.AsyncResult __result)
                                 {
                                     EquipmentPrxHelper.__use_completed(this, __result);
                                 }
                             });
    }

    private Ice.AsyncResult begin_use(java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__use_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__use_name, __cb);
        try
        {
            __result.prepare(__use_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_use(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __use_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __use_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        lab.EquipmentPrx __proxy = (lab.EquipmentPrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_use(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static EquipmentPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), EquipmentPrx.class, EquipmentPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static EquipmentPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), EquipmentPrx.class, EquipmentPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static EquipmentPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), EquipmentPrx.class, EquipmentPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static EquipmentPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), EquipmentPrx.class, EquipmentPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static EquipmentPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, EquipmentPrx.class, EquipmentPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static EquipmentPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, EquipmentPrx.class, EquipmentPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::lab::Equipment"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, EquipmentPrx v)
    {
        __os.writeProxy(v);
    }

    public static EquipmentPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            EquipmentPrxHelper result = new EquipmentPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
